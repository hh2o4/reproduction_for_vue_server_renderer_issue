const path = require('path');
const webpack = require('webpack');
const MFS = require('memory-fs');
const clientConfig = require('./webpack.client.config');
const serverConfig = require('./webpack.server.config');
const BrowserSyncPlugin = require('browser-sync-webpack-plugin');

const port = process.env.PORT || 9000;
const routerBase = process.env.ROUTER_BASE || 'test';

const readFile = (fs, file) => {
  try {
    return fs.readFileSync(path.join(clientConfig.output.path, file), 'utf-8');
  } catch (e) {}
};

module.exports = function setupDevServer(app, cb) {
  let bundle, clientManifest;
  let resolve;
  const readyPromise = new Promise((r) => {
    resolve = r;
  });
  const ready = (...args) => {
    cb(...args);
    resolve();
  };

  // modify client config to work with hot middleware
  clientConfig.entry.app = [
    `webpack-hot-middleware/client?path=/${routerBase}/__webpack_hmr`,
    clientConfig.entry.app,
  ];
  clientConfig.output.filename = '[name].js';
  clientConfig.plugins.push(
    new webpack.HotModuleReplacementPlugin(),
    new webpack.NoEmitOnErrorsPlugin(),
    new BrowserSyncPlugin(
      {
        host: 'localhost',
        port: 8000,
        proxy: `http://localhost:${port}/`,
      },
      {
        // prevent BrowserSync from reloading the page
        // and let Webpack Dev Server take care of this
        reload: false,
      },
    ),
  );

  // dev middleware
  const clientCompiler = webpack(clientConfig);
  const devMiddleware = require('webpack-dev-middleware')(clientCompiler, {
    publicPath: clientConfig.output.publicPath,
    noInfo: true,
  });
  app.use(devMiddleware);
  clientCompiler.plugin('done', (stats) => {
    stats = stats.toJson();
    stats.errors.forEach((err) => console.error(err));
    stats.warnings.forEach((err) => console.warn(err));
    if (stats.errors.length) return;

    clientManifest = JSON.parse(
      readFile(devMiddleware.fileSystem, 'vue-ssr-client-manifest.json'),
    );
    if (bundle) {
      ready(bundle, {
        clientManifest,
        inject: false,
      });
    }
  });

  // hot middleware
  app.use(
    require('webpack-hot-middleware')(clientCompiler, {
      path: `/${routerBase}/__webpack_hmr`,
    }),
  );

  // watch and update server renderer
  const serverCompiler = webpack(serverConfig);
  const mfs = new MFS();
  serverCompiler.outputFileSystem = mfs;
  serverCompiler.watch({}, (err, stats) => {
    if (err) throw err;
    stats = stats.toJson();
    if (stats.errors.length) return;

    // read bundle generated by vue-ssr-webpack-plugin
    bundle = JSON.parse(readFile(mfs, 'vue-ssr-server-bundle.json'));
    if (clientManifest) {
      ready(bundle, {
        clientManifest,
        inject: false,
      });
    }
  });

  return readyPromise;
};
